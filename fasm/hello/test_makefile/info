компиляция исполняемого файла
test_makefile$ make source=hello

запуск
test_makefile$ ./hello

--------------------------------
    nasm -f elf $(source).asm - чтобы собрать программу в объектный файл hello.o
	ld -m elf_i386 -s -o $(source) $(source).o  - тобы ваш объектный файл прошел линкинг и создался исполняемый файл под названием hello
	rm $(source).o 

--------------------------------

Архитектура x86-64 (IA-32e) имеет:

16 целочисленных (десять 32-битных и шесть 16-битных) 64-битных регистров общего назначения (RAX, RBX, RCX, RDX, RBP, RSI, RDI, RSP, R8 — R15);
8 80-битных регистров с плавающей точкой (ST0 — ST7);
8 64-битных регистров Multimedia Extensions (MM0 — MM7, имеют общее пространство с регистрами ST0 — ST7);
16 128-битных регистров SSE (XMM0 — XMM15);
64-битный указатель RIP и 64-битный регистр флагов RFLAGS.

Регистры делятся на три категории:
   Общие регистры (General Registers);
   Регистры управления (Control Registers);
   Сегментные регистры (Segment Registers).

В свою очередь, общие регистры делятся на следующие:
   Регистры данных (Data Registers);
   Регистры-указатели (Pointer Registers);
   Индексные регистры (Index Registers)

Регистры данных (Data Registers)
  Эти 32-битные регистры могут быть использованы следующими тремя способами
     - как полные 32-битные регистры данных: EAX, EBX, ECX, EDX
     - как четыре 16-битных регистра данных: AX, BX, CX, DX
     - как восемь 8-битных регистров данных: AH, AL, BH, BL, CH, CL, DH, DL

Регистры-указатели (Pointer Registers)
  32-битные регистры EIP, ESP и EBP и соответствующие им 16-битные регистры IP, SP, BP

Индексные регистры (Index Registers)
  32-битные индексные регистры ESI и EDI и их 16-битные версии: SI и DI


--------------------------------
[метка]   mnemonic   [операнды]   [; комментарий]

Базовая инструкция состоит из названия инструкции (mnemonic) и операндов (они же «параметры»)

INC COUNT        ; выполняем инкремент переменной памяти COUNT
MOV TOTAL, 48    ; перемещаем значение 48 в переменную памяти TOTAL				  
ADD AH, BH       ; добавляем содержимое регистра BH к регистру AH
AND MASK1, 128   ; выполняем операцию AND с переменной MASK1 и 128 


-----------------------------

segment .text	   ; сегмент когда 
   global_start    ; должно быть объявлено для линкера 
	
_start:	           ; сообщаем линкеру точку входа
   mov edx,len	   ; длина сообщения 
   mov ecx,msg     ; сообщение для написания 
   mov ebx,1	   ; файловый дескриптор (stdout)
   mov eax,4	   ; номер системного вызова (sys_write)
   int 0x80	       ; вызов ядра 
 
   mov eax,1       ; номер системного вызова (sys_exit)
   int 0x80	       ; вызов ядра 
 
segment .data      ; сегмент данных 
msg	db 'Hello, world!',0xa   ; наша строка
len	equ	$ - msg              ; длина нашей строки

